@require: color
@import: ../slydifi

module Plain = struct

  signature Font = sig
    val normal: context -> context
    val emph: context -> context
    val slide-title: context -> context
    val frame-title: context -> context
  end

  signature Color = sig
    val fg: color
  end

  signature Length = sig
    val margin-bot-frame-title: length
  end

  signature Config = sig
    module Font: Font
    module Color: Color
    module Length: Length
  end

  module PlainTemplate = fun (C: Config) -> struct
    type title-content = (| title: inline-text |)

    val layout = (|
      paper-width = 254mm,
      paper-height = 142.9mm,
      text-width = 254mm -' 40pt,
      text-height = 142.9mm -' 30pt,
      text-horizontal-margin = 20pt,
      text-vertical-margin = 10pt,
    |)
    val init-ctxf ctx = ctx |> C.Font.normal

    val frame-title ctx content =
      let it-title = content#title in
      let ib-title =
        let ctx = ctx |> C.Font.slide-title in
        read-inline ctx it-title
      in
      let bb-skip = block-skip 100pt in
      let bb-title = line-break false false ctx (inline-fil ++ ib-title ++ inline-fil) in
      ([], bb-skip +++ bb-title, [])

    val frame-normal ctx content =
      let bb-title =
        let ctx =
          ctx
            |> C.Font.frame-title
            |> set-paragraph-margin 0pt C.Length.margin-bot-frame-title
        in
        let it-title = content#title in
        let ib-title =
          read-inline ctx it-title
        in
        line-break false false ctx (inline-fil ++ ib-title ++ inline-fil)
      in
      let bb-body = read-block ctx content#body in
      ([], bb-title +++ bb-body, [])

    val inline ctx \emph it =
      let ctx = ctx |> C.Font.emph in
      read-inline ctx it

  end

  module DefaultConfig :> Config = struct
    module Font = struct
      val set-fonts fsize ctx = ctx
        |> set-font Latin          (`Junicode`, 1.0, 0.0)
        |> set-font Kana           (`ipaexm`, 1.0, 0.0)
        |> set-font HanIdeographic (`ipaexm`, 1.0, 0.0)
        |> set-font-size fsize
        |> set-paragraph-margin (fsize *' 0.6) (fsize *' 0.6)
        |> set-leading (fsize *' 1.4)

      val normal ctx = ctx |> set-fonts 18pt
      val slide-title ctx = ctx |> set-fonts 30pt
      val frame-title ctx = ctx |> set-fonts 25pt
      val emph ctx = ctx |> set-text-color Color.red
    end
    module Color = struct
      val fg = Color.black
    end
    module Length = struct
      val margin-bot-frame-title = 20pt
    end
  end

  module DefaultTheme = PlainTemplate DefaultConfig
  module DefaultClass = Slydifi.Make DefaultTheme

  module FancyConfig :> Config = struct
    module Font = struct
      val set-fonts fsize ctx = ctx
        |> set-font Latin          (`system:IBMPlexSansJP`, 1.0, 0.0)
        |> set-font Kana           (`system:IBMPlexSansJP`, 1.0, 0.0)
        |> set-font HanIdeographic (`system:IBMPlexSansJP`, 1.0, 0.0)
        |> set-font-size fsize
        |> set-paragraph-margin (fsize *' 0.6) (fsize *' 0.6)
        |> set-leading (fsize *' 1.4)

      val normal ctx = ctx |> set-fonts 22pt
      val slide-title ctx = ctx |> set-fonts 40pt
      val frame-title ctx = ctx |> set-fonts 36pt

      val emph ctx = ctx
        |> set-text-color Color.red
        |> set-font-size (get-font-size ctx *' 1.5)
    end
    module Color = struct
      val fg = Color.gray 0.7
    end
    module Length = struct
      val margin-bot-frame-title = 20pt
    end
  end

  module FancyTheme = PlainTemplate FancyConfig
  module FancyClass = Slydifi.Make FancyTheme

end
