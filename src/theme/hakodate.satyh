%% hakodate.satyh
%%
%% SLyDIFi theme file.
%%
%% This slide theme is heavily inspired by the gruvbox colorscheme.
%% [gruvbox](https://github.com/gruvbox-community/gruvbox): Copyright (c) 2018 Pavel Pertsev
%% https://github.com/gruvbox-community/gruvbox/blob/master/colors/gruvbox.vim

@require: gr
@require: annot
@require: railway/railway
@require: base/color-ext
@require: base/int
@require: class-slydifi/slydifi
@require: class-slydifi/footnote
@require: enumitem/enumitem

type hakodate-config = (|
  font-normal : context -> context;
  font-bold : context -> context;
  font-code : context -> context;
  font-slide-title : context -> context;
  font-slide-author : context -> context;
  font-slide-date : context -> context;
  font-section-title : context -> context;
  font-frame-title : context -> context;
  font-pagenum : context -> context;
  font-footnote : context -> context;
  font-quote : context -> context;

  color-bg : color;
  color-fg : color;
  color-emph : color;
  color-link : color;
  color-footer : color;
  color-title : color;
  color-separator : color;
  color-slide-title-ribbon : color;
  color-section-ribbon : color;
  color-section-ribbon-intersect : color;
  % decoration
  color-quote : color;
  color-quote-line : color;
  % listing
  color-bullet-dia : color;
  color-bullet-tria : color;
  color-bullet-circ : color;

  length-frame-title-height : length;
  length-frame-title-left-margin : length;
  length-frame-title-bot-margin : length;
  length-frame-body-top-margin : length;
  length-title-line-width : length;
|)


module SlydifiThemeHakodate: sig

  val layout: frame-layout
  val document: block-text -> document

% config
  val config: hakodate-config SlydifiParam.t
  val default-config: hakodate-config
  direct +set-config : [hakodate-config] block-cmd
  direct \set-config : [hakodate-config] inline-cmd
  direct +with-config : [hakodate-config; block-text] block-cmd
  direct \with-config : [hakodate-config; inline-text] inline-cmd

% frames
  %% スライドマスター。
  val frame-master: hakodate-config -> unit Frame.frame
  %% ページ番号の付いたスライドマスター。
  val frame-master-with-footer: hakodate-config -> unit Frame.frame
  %% スライド全体のタイトルフレーム。
  %% title: スライドのタイトル
  %% title: スライドのタイトル
  val frame-slide-title: hakodate-config ->
    ((| title: inline-text list; author: inline-text list; date: inline-text list|))
      Frame.frame
  %% セクションフレーム。
  % val frame-section-title: layout-slydifi-theme ((| title: inline-text list; |)) Frame.frame
  %% タイトルフレーム。
  val frame-normal: hakodate-config -> ((| title: inline-text; inner: block-text |)) Frame.frame

% frame commands
  %% frame-slide-title に従ってタイトルスライドを生成する。
  direct +make-title : [(| title: inline-text list; author: inline-text list; date: inline-text list|);] block-cmd
  %% frame-normal に従って通常のスライドを生成する。
  direct +section : [inline-text list; block-text;] block-cmd
  direct +frame : [int?; inline-text; block-text;] block-cmd

% inline commands
  direct \emph : [(int -> bool)?; inline-text] inline-cmd
  direct \textbf : [(int -> bool)?; inline-text] inline-cmd
  direct \link : [inline-text?; string] inline-cmd
  direct \code : [string] inline-cmd
  direct +quote : [block-text] block-cmd

% listing
  val listing-itemfmt : context -> int list -> itemconfig
  direct +listing : [(context -> int list -> itemconfig)?; itemize] block-cmd
  direct \listing : [(context -> int list -> itemconfig)?; itemize] inline-cmd
  direct +itemize : [(context -> int list -> itemconfig)?; block-text] block-cmd
  direct +ditem: [inline-text; inline-text; block-text] block-cmd
  direct +oitem : [(int -> bool); inline-text; block-text] block-cmd
  val \label-dia : [] inline-cmd
  val \label-tria : [] inline-cmd
  val \label-circ : [] inline-cmd

% 脚注
  direct \footnote : [inline-text] inline-cmd
  direct \footnotetext : [string; inline-text] inline-cmd
  direct \footnotemark : [string] inline-cmd

end = struct

  let page-num = SlydifiParam.make 0

  let layout = (|
    paper-width = 254mm;
    paper-height = 142.9mm;
    text-width = 254mm -' 40pt;
    text-height = 142.9mm -' 30pt;
    text-horizontal-margin = 20pt;
    text-vertical-margin = 15pt;
  |)
  let xrel xfloat = layout#paper-width *' xfloat
  let yrel yfloat = layout#paper-height *' yfloat
  let rel xfloat yfloat = (xrel xfloat, yrel yfloat)

% configuration

  let set-font-metrics fsize ctx =
    ctx |> set-font-size fsize
        |> set-paragraph-margin (fsize *' 0.6) (fsize *' 0.6)
        |> set-min-gap-of-lines 0pt
        |> set-leading (fsize *' 1.4)

  let default-config =
    let default-font ctx =
      ctx |> set-font Latin          (`system:mplus-2p-regular`, 1.0, 0.0)
          |> set-font Kana           (`system:mplus-2p-regular`, 1.0, 0.0)
          |> set-font HanIdeographic (`system:mplus-2p-regular`, 1.0, 0.0)
    in
    let code-font ctx =
      ctx |> set-font Latin          (`system:mplus-1m-regular`, 1.0, 0.0)
          |> set-font Kana           (`system:mplus-1m-regular`, 1.0, 0.0)
          |> set-font HanIdeographic (`system:mplus-1m-regular`, 1.0, 0.0)
    in
    let bold-font ctx =
      ctx |> set-font Latin          (`system:mplus-2p-bold`, 1.0, 0.0)
          |> set-font Kana           (`system:mplus-2p-bold`, 1.0, 0.0)
          |> set-font HanIdeographic (`system:mplus-2p-bold`, 1.0, 0.0)
    in

    (|
      font-normal = SlydifiScheme.apply-font-cfg [default-font; set-font-metrics 20pt];
      font-bold = SlydifiScheme.apply-font-cfg [bold-font];
      font-code = SlydifiScheme.apply-font-cfg [code-font];
      font-slide-title = SlydifiScheme.apply-font-cfg [bold-font; set-font-metrics 32pt];
      font-slide-author = SlydifiScheme.apply-font-cfg [bold-font; set-font-metrics 20pt;];
      font-slide-date = SlydifiScheme.apply-font-cfg [bold-font; set-font-metrics 18pt;];
      font-section-title = SlydifiScheme.apply-font-cfg [bold-font; set-font-metrics 32pt];
      font-frame-title = SlydifiScheme.apply-font-cfg [bold-font; set-font-metrics 28pt];
      font-pagenum = SlydifiScheme.apply-font-cfg [default-font; set-font-metrics 12pt;];
      font-footnote = SlydifiScheme.apply-font-cfg [default-font; set-font-metrics 12pt;];
      font-quote = SlydifiScheme.apply-font-cfg [default-font; set-font-metrics 18pt;];

      color-bg = Color.of-css `#F9F5D7`;
      color-fg = Color.of-css `#282828`;
      color-emph = Color.of-css `#CC241D`;
      color-link = Color.of-css `#8F3F71`;
      color-footer = Color.of-css `#F9F5D7` |> color-inner ?:0.5 (Color.of-css `#282828`);
      color-title = Color.of-css `#076678`;
      color-separator = Color.of-css `#076678`;
      color-slide-title-ribbon = Color.of-css `#076678`;
      color-section-ribbon = Color.of-css `#F9F5D7` |> color-inner ?:0.4 (Color.of-css `#076678`);
      color-section-ribbon-intersect = Color.of-css `#076678`;
      % listing
      color-bullet-dia = Color.of-css `#076678`;
      color-bullet-tria = Color.of-css `#076678`;
      color-bullet-circ = Color.of-css `#076678`;
      % quotation
      color-quote = Color.of-css `#282828` |> color-inner ?:0.2 (Color.of-css `#F9F5D7`);
      color-quote-line = Color.of-css `#F9F5D7` |> color-inner ?:0.6 (Color.of-css `#076678`);

      length-frame-title-height = 32pt;
      length-frame-title-left-margin = 12pt;
      length-frame-title-bot-margin = 10pt;
      length-frame-body-top-margin = 15pt;
      length-title-line-width = 3pt;  % タイトルの下線とタイトル文字の間隔
    |)

  let config = SlydifiParam.make default-config

  let-block +set-config cfg = '< +SlydifiParam.set-param(config)(cfg); >
  let-inline \set-config cfg = { \SlydifiParam.set-param(config)(cfg); }
  let-block +with-config cfg bt = '< +SlydifiParam.with-param(config)(cfg)(bt); >
  let-inline \with-config cfg it = { \SlydifiParam.with-param(config)(cfg)(it); }

  let-inline ctx \code code =
    let config = SlydifiParam.get config in
    let ctx = ctx |> config#font-code in
    let fsize = get-font-size ctx in

    script-guard Latin (read-inline ctx (embed-string code))

  let document bt =
    let config = SlydifiParam.get config in
    let hookf _ _ =
      let numpages = SlydifiParam.get page-num in
      register-cross-reference `pagecount` (arabic numpages)
    in
    let init-ctx ctx =
      ctx |> config#font-normal
          |> set-text-color config#color-fg
          |> set-code-text-command (command \code)
    in
    SlydifiScheme.document-scheme layout init-ctx hookf bt

% frames

  let frame-master config =
    let f ctx () =
      (block-nil, [
        Gr.rectangle (0pt, 0pt) (layout#paper-width, layout#paper-height)
          |> fill config#color-bg
      ])
    in
    Frame.make layout f

  let frame-master-with-footer config =
    let f ctx () =
      % frame-master の graphics list を踏襲する
      let (_, gr-frame-master) = frame-master config |> Frame.embed ctx () in

      let pagenum = SlydifiParam.get page-num in
      let total = get-cross-reference `pagecount` |> Option.from `1` in

      let gr-page-number =
        let it-pagenum = pagenum |> arabic |> embed-string in
        let it-total = embed-string total in
        let ctx-pagenum = config#font-pagenum ctx |> set-text-color config#color-footer in
        let ib = read-inline ctx-pagenum {#it-pagenum;/#it-total;} in
        let pos = (xrel 1.0 -' 20pt, 24pt) in
        SlydifiGraphics.put-text (1., 1.) pos ib
      in

      (block-nil, [gr-frame-master; gr-page-number; ] |> List.concat)
    in
    Frame.make layout f

  let frame-slide-title config =
    let f ctx content =
      % frame-master の graphics list を踏襲する
      let (_, gr-frame-master) = frame-master config |> Frame.embed ctx () in

      let title-mgn = 16.8pt in
      let ribbon-width = 8pt in
      let hribbon-t = yrel 0.44 in
      let hribbon-b = yrel 0.44 -' ribbon-width in
      let vribbon-r = xrel 0.19 in
      let vribbon-l = xrel 0.19 -' ribbon-width in

      let gr-bgs =
        let north-rect = Gr.rectangle (vribbon-l, hribbon-t) (vribbon-r, yrel 1.00) in
        let south-rect = Gr.rectangle (vribbon-l, hribbon-b) (vribbon-r, yrel 0.00) in
        let east-rect  = Gr.rectangle (vribbon-r, hribbon-b) (xrel 1.00, hribbon-t) in
        let west-rect  = Gr.rectangle (vribbon-l, hribbon-b) (xrel 0.00, hribbon-t) in

        [
          fill config#color-slide-title-ribbon north-rect;
          fill config#color-slide-title-ribbon south-rect;
          fill config#color-slide-title-ribbon east-rect;
          fill config#color-slide-title-ribbon west-rect;
        ]
      in

      let gr-title =
        let ctx = ctx |> config#font-slide-title |> set-text-color config#color-title in
        let iblst = content#title |> List.map (read-inline ctx) in
        let pos = (vribbon-r +' title-mgn, hribbon-t +' title-mgn) in
        SlydifiGraphics.put-texts
          (| align = (0.0, 0.0); text-align = 0.0; leading = (get-font-size ctx *' 1.6) |)
            pos iblst
      in

      let gr-author =
        let ctx = ctx |> config#font-slide-author |> set-text-color config#color-title in
        let iblst = content#author |> List.map (read-inline ctx) in
        let pos = (vribbon-r +' title-mgn, hribbon-b -' title-mgn) in
        SlydifiGraphics.put-texts
          (| align = (0.0, 1.0); text-align = 0.0; leading = (get-font-size ctx *' 1.6) |)
            pos iblst
      in

      let gr-date =
        let ctx = ctx |> config#font-slide-date |> set-text-color config#color-title in
        let iblst = content#date |> List.map (read-inline ctx) in
        let pos = (vribbon-r +' title-mgn, yrel 0.2 -' title-mgn) in
        SlydifiGraphics.put-texts
          (| align = (0.0, 1.0); text-align = 0.0; leading = (get-font-size ctx *' 1.6) |)
            pos iblst
      in

      (block-nil, [gr-frame-master; gr-bgs; gr-title; gr-author; gr-date] |> List.concat)
    in
    Frame.make layout f

  let frame-section-title config =
    let f ctx content =
      % frame-master の graphics list を踏襲する
      let (_, gr-frame-master) = frame-master config |> Frame.embed ctx () in

      % 設定
      let title-mgn = 18pt in
      let ribbon-width = 5pt in
      let hribbon-t = yrel 0.44 in
      let hribbon-b = yrel 0.44 -' ribbon-width in
      let vribbon-r = xrel 0.11 in
      let vribbon-l = xrel 0.11 -' ribbon-width in

      % タイトルのグラフィックス
      let gr-bgs =
        let north-rect = Gr.rectangle (vribbon-l, hribbon-t) (vribbon-r, yrel 1.00) in
        let south-rect = Gr.rectangle (vribbon-l, hribbon-b) (vribbon-r, yrel 0.00) in
        let east-rect  = Gr.rectangle (vribbon-r, hribbon-b) (xrel 1.00, hribbon-t) in
        let west-rect  = Gr.rectangle (vribbon-l, hribbon-b) (xrel 0.00, hribbon-t) in
        let cent-rect  = Gr.rectangle (vribbon-l, hribbon-b) (vribbon-r, hribbon-t) in

        [
          fill config#color-section-ribbon north-rect;
          fill config#color-section-ribbon south-rect;
          fill config#color-section-ribbon east-rect;
          fill config#color-section-ribbon west-rect;
          fill config#color-section-ribbon-intersect cent-rect;
        ]
      in

      let gr-titles =
        let ctx = ctx |> config#font-section-title |> set-text-color config#color-title in
        let iblst = content#title |> List.map (read-inline ctx) in
        let pos = (vribbon-r +' title-mgn, hribbon-t +' title-mgn) in
        SlydifiGraphics.put-texts
          (| align = (0.0, 0.0); text-align = 0.0; leading = (get-font-size ctx *' 1.6) |)
            pos iblst
      in

      (block-nil, [gr-frame-master; gr-bgs; gr-titles] |> List.concat)
    in
    Frame.make layout f

  let frame-normal config =
    let f ctx content =
      % frame-master-with-footer の graphics list を踏襲する
      let (_, gr) = frame-master-with-footer config |> Frame.embed ctx () in

      let title-ymin = layout#paper-height -' config#length-frame-title-height in

      let gr-separator =
        let xleft = config#length-frame-title-left-margin in
        let xright = layout#paper-width -' config#length-frame-title-left-margin in
        let y = title-ymin -' config#length-frame-title-bot-margin in
        [Gr.line (xleft, y) (xright, y) |> stroke config#length-title-line-width config#color-separator]
      in

      % タイトルのブロックボックス列
      let gr-title =
        let ctx-title = ctx |> config#font-frame-title |> set-text-color config#color-title in
        let ib-title = read-inline ctx-title content#title in
        [draw-text (config#length-frame-title-left-margin, title-ymin) ib-title]
      in

      % 中身のブロックボックス列
      let bb-inner =
        let ctx = ctx |> config#font-normal |> set-text-color config#color-fg in
        let bb-blank skip =
          line-break false false (ctx |> set-paragraph-margin 0pt skip) inline-fil
        in
        bb-blank (config#length-frame-title-height +' config#length-frame-body-top-margin)
          +++ (read-block ctx content#inner)
      in

      (bb-inner, [gr; gr-separator; gr-title] |> List.concat)

    in
    Frame.make layout f

% frame commands

  let-block ctx +make-title content =
    read-block ctx '<
      +SlydifiScheme.genframe(frame-slide-title (SlydifiParam.get config))(1)(content);
    >

  let-block ctx +section title inner =
    read-block ctx '<
      +SlydifiScheme.genframe(frame-section-title (SlydifiParam.get config))(1)(|title = title;|);
      #inner;
    >

  let-block ctx +frame ?:n-frame title inner =
    let () = page-num |> SlydifiParam.set (SlydifiParam.get page-num + 1) in
    let n-frame = n-frame |> Option.from 1 in
    read-block ctx '<
      +SlydifiScheme.genframe(frame-normal (SlydifiParam.get config))(n-frame)(|title = title; inner = inner|);
    >

% inline commands
  let-inline ctx \emph ?:dcf it =
    let config = SlydifiParam.get config in
    let dcf = Option.from (fun _ -> true) dcf in
    let ctx2 =
      SlydifiOverlay.select-from-two dcf (
        ctx |> config#font-bold
            |> set-text-color config#color-emph
      ) ctx
    in
    read-inline ctx2 it

  let-inline ctx \textbf ?:dcf it =
    let config = SlydifiParam.get config in
    let dcf = Option.from (fun _ -> true) dcf in
    let ctx2 =
      SlydifiOverlay.select-from-two dcf (config#font-bold ctx) ctx
    in
    read-inline ctx2 it

  let-inline ctx \link ?:text url =
    let config = SlydifiParam.get config in
    match text with
    | Some(text) ->
        let ctx =
          ctx |> set-text-color config#color-link
        in
        read-inline ctx {\href(url)(text);}
    | None ->
        let text = embed-string url in
        let ctx =
          ctx
            |> config#font-code
            |> set-text-color config#color-link
        in
        read-inline ctx {\href(url)(text);}

  let-block ctx +quote bt =
    let config = SlydifiParam.get config in
    let deco (x, y) w h d =
      [
        fill config#color-quote-line (Gr.rectangle (x, y) (x +' 6pt, y +' h))
      ]
    in
    block-frame-breakable ctx (20pt, 0pt, 10pt, 10pt)
      (deco, deco, deco, deco)
        (fun ctx -> (
          let ctx2 = ctx
            |> set-text-color config#color-quote
            |> config#font-quote
          in
          (read-block ctx2 bt)
        ))


% listing

  let-inline ctx \label-dia =
    let config = SlydifiParam.get config in
    let fsize = get-font-size ctx in
    let grf (x, y) =
      let edge = Rail.( init |> push-line (fsize *' 0.25, fsize *' 0.25) ) in
      let gr =
        Rail.(map-repeat (fun i -> edge ^ (90. *. (float i))) 4)
          |> Rail.to-loop (x +' fsize *' 0.25, y +' fsize *' 0.1)
          |> fill config#color-bullet-dia
      in
      [gr]
    in
    inline-graphics 16pt 8pt 0pt grf

  let-inline ctx \label-tria =
    let config = SlydifiParam.get config in
    let fsize = get-font-size ctx in
    let grf (x, y) =
      let gr =
        Rail.(
          init |> push-line (fsize *' 0.4, fsize *' 0.2)
               |> push-line (0pt -' fsize *' 0.4, fsize *' 0.2)
               |> push-line (0pt, 0pt -' fsize *' 0.4)
               |> to-loop (x, y +' fsize *' 0.1)
        ) |> fill config#color-bullet-tria
      in
      [gr]
    in
    let path (x, y) =
      let yc = y +' fsize *' 0.3 in
      let xl = x in
      let xr = x +' fsize *' 0.4 in
      let yu = yc +' fsize *' 0.2 in
      let yd = yc -' fsize *' 0.2 in
      start-path (xl, yu)
        |> line-to (xr, yc)
        |> line-to (xl, yd)
        |> close-with-line
    in
    let gr (x, y) = [fill config#color-bullet-tria (path (x, y))] in
    inline-graphics 16pt 8pt 0pt grf

  let-inline ctx \label-circ =
    let config = SlydifiParam.get config in
    let fsize = get-font-size ctx in
    let path (x, y) =
      let cx = x +' fsize *' 0.3 in
      let cy = y +' fsize *' 0.3 in
      let r = fsize *' 0.15 in
      Gr.circle (cx, cy) r
    in
    let gr (x, y) = [fill config#color-bullet-circ (path (x, y))] in
    inline-graphics 16pt 8pt 0pt (gr)

  let listing-itemfmt ctx idxlst =
    let fsize =
      let config = SlydifiParam.get config in
      get-font-size (config#font-normal ctx)
    in
    let context-body ctxorig _ =
      let shrink-ratio =
        let depth = List.length idxlst in
        0.95 |> Float.pow (float (depth - 1))
          |> Float.max 0.85
          |> Float.min 1.0
      in
      ctxorig |> set-font-metrics (fsize *' shrink-ratio)
    in
    let fmt =
      {|\label-dia;|\label-tria;|\label-circ;|\label-circ;|\label-circ;|}
        |> List.map EnumitemAlias.text-label |> EnumitemAlias.with-depth
        |> EnumitemFormat.set-context-body context-body
    in
    fmt ctx idxlst

  let-block ctx +listing ?:itemfmt item =
    let itemfmt = itemfmt |> Option.from listing-itemfmt in
    read-block ctx '< +listing?:(itemfmt)(item); >

  let-inline ctx \listing ?:itemfmt item =
    let itemfmt = itemfmt |> Option.from listing-itemfmt in
    read-inline ctx {\EnumitemAlias.listing?:(itemfmt)(item);}

  let-block ctx +itemize ?:itemfmt bt =
    let itemfmt = itemfmt |> Option.from listing-itemfmt in
    read-block ctx '< +itemize(itemfmt)(bt); >

  let-block +ditem dt it-dd bt-dd =
    '<
      +EnumitemAlias.ditem?:(fun it -> {\emph{#it;}})(dt)(it-dd)(bt-dd);
    >

  let-block +oitem dcf it bt =
    '< +ghost(dcf)< +item(it)(bt); > >

% \footnote{} command

  let-inline ctx \footnotetext ref-label it =
    let config = SlydifiParam.get config in
    let bbf num =
      let it-num = embed-string (arabic num) in
      let ctx = config#font-footnote ctx in
        line-break false false ctx (read-inline ctx {#it-num; #it;} ++ inline-fil)
    in
      FootnoteScheme.main ctx (Some(ref-label)) (fun _ -> inline-nil) bbf

  let-inline ctx \footnotemark ref-label =
    let size = get-font-size ctx in
    let ctx =
      ctx |> set-font-size (size *' 0.75)
          |> set-manual-rising (size *' 0.25)
    in
    let ctx =
      ctx |> set-font-size (size *' 0.75)
          |> set-manual-rising (size *' 0.25)
    in
    match FootnoteScheme.get-footnote-num ref-label with
    | Some(n) ->
      let it-num = embed-string n in
      read-inline ctx {\*#it-num;}
    | _ ->
      read-inline ctx {\*?}

  let-inline ctx \footnote it =
    let config = SlydifiParam.get config in
    let size = get-font-size ctx in
    let ibf num =
      let it-num = embed-string (arabic num) in
      let ctx =
        ctx |> set-font-size (size *' 0.75)
            |> set-manual-rising (size *' 0.25)
      in
        read-inline ctx {\*#it-num;}
    in
    let bbf num =
      let it-num = embed-string (arabic num) in
      let ctx = config#font-footnote ctx in
        line-break false false ctx (read-inline ctx {#it-num; #it;} ++ inline-fil)
    in
      FootnoteScheme.main ctx None ibf bbf

end

let document = SlydifiThemeHakodate.document

