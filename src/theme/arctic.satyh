%% arctic.satyh
%%
%% SLyDIFi theme file.
%%
%% This slide theme is heavily inspired by the iceberg.vim colorscheme.
%% [iceberg.vim](https://github.com/cocopon/iceberg.vim): Copyright (c) 2014 cocopon <cocopon@me.com>
%% https://github.com/cocopon/iceberg.vim/blob/master/colors/iceberg.vim

@require: gr
@require: annot
@require: railway/railway
@require: base/color-ext
@require: base/int
@require: base/float
@require: base/tuple
@require: base/typeset/base
@require: class-slydifi/slydifi
@require: class-slydifi/footnote
@require: enumitem/enumitem

type arctic-config = (|
  %% font
  font-normal : context -> context;
  font-bold : context -> context;
  font-code : context -> context;
  font-slide-title : context -> context;
  font-slide-author : context -> context;
  font-slide-date : context -> context;
  font-section-title : context -> context;
  font-frame-title : context -> context;
  font-pagenum : context -> context;
  font-footnote : context -> context;
  font-quote : context -> context;

  %% color
  % basic
  color-bg : color;
  color-fg : color;
  color-emph : color;
  color-weak : color;
  color-red : color;
  color-green : color;
  color-link : color;
  color-bg-code : color;
  % frame template
  color-bg-slide-author : color;
  color-fg-section-title : color;
  color-fg-section-mirror : color;
  color-bg-section-mirror : color;
  color-separator : color;
  color-pagenum : color;
  color-indicator-total : color;
  color-indicator-section : color;
  color-indicator-done : color;
  % decoration
  color-quote : color;
  color-quote-line : color;
  % listing
  color-bullet-dia : color;
  color-bullet-tria : color;
  color-bullet-circ : color;

  %% length
  length-frame-title-height : length;
  length-frame-title-left-margin : length;
  length-frame-title-bot-margin : length;
  length-frame-body-top-margin : length;
  length-indicator-line-thickness: length;
  length-indicator-bar-height: length;
  length-frame-footer-xmargin: length;
  length-frame-footer-ymargin: length;
|)

module SlydifiThemeArctic: sig

  val layout: frame-layout
  val document: block-text -> document

% config

  val default-config: arctic-config
  val config: arctic-config SlydifiParam.t
  direct +set-config : [arctic-config] block-cmd
  direct \set-config : [arctic-config] inline-cmd
  direct +with-config : [arctic-config; block-text] block-cmd
  direct \with-config : [arctic-config; inline-text] inline-cmd

% frames
  %% スライドマスター。
  val frame-master: arctic-config -> unit Frame.frame
  %% ページ番号の付いたスライドマスター。
  % val frame-master-with-footer: arctic-config -> unit Frame.frame
  %% スライド全体のタイトルフレーム。
  %% title: スライドのタイトル
  %% title: スライドのタイトル
  val frame-slide-title: arctic-config ->
    ((| title: inline-text list; author: inline-text list; date: inline-text list|))
      Frame.frame
  %% セクションフレーム。
  val frame-section-title: arctic-config -> ((| title: inline-text list; |)) Frame.frame
  %% タイトルフレーム。
  val frame-normal: arctic-config -> ((| title: inline-text; inner: block-text; footer: bool |)) Frame.frame

% frame commands
  %% frame-slide-title に従ってタイトルスライドを生成する。
  direct +make-title : [(| title: inline-text list; author: inline-text list; date: inline-text list|);] block-cmd
  %% frame-section-title に従って通常のスライドを生成する。
  direct +section : [inline-text?; inline-text list; block-text;] block-cmd
  direct +table-of-contents: [int?; inline-text; ] block-cmd

  direct +section-noframe : [inline-text?; block-text;] block-cmd
  %% frame-normal に従って通常のスライドを生成する。
  direct +frame : [int?; inline-text; block-text;] block-cmd
  direct +frame-nofooter : [int?; inline-text; block-text;] block-cmd
  direct +namedframe : [string; inline-text; block-text;] block-cmd
  direct +againframe : [int?; string] block-cmd

% decoration commands
  direct \emph : [(int -> bool)?; inline-text] inline-cmd
  direct \weak : [(int -> bool)?; inline-text] inline-cmd
  direct \textbf : [(int -> bool)?; inline-text] inline-cmd
  direct \link : [inline-text?; string] inline-cmd
  direct \code : [string] inline-cmd
  direct +quote : [block-text] block-cmd

% listing
  val listing-itemfmt : context -> int list -> itemconfig
  direct +listing : [(context -> int list -> itemconfig)?; itemize] block-cmd
  direct \listing : [(context -> int list -> itemconfig)?; itemize] inline-cmd
  direct +itemize : [(context -> int list -> itemconfig)?; block-text] block-cmd
  direct +ditem: [inline-text; inline-text; block-text] block-cmd
  direct +oitem : [(int -> bool); inline-text; block-text] block-cmd
  val \label-dia : [] inline-cmd
  val \label-tria : [] inline-cmd
  val \label-circ : [] inline-cmd

% 脚注
  direct \footnote : [inline-text] inline-cmd
  direct \footnotetext : [string; inline-text] inline-cmd
  direct \footnotemark : [string] inline-cmd

end = struct

  let section-name = SlydifiParam.make {}

  let page-num = SlydifiParam.make 0

  let layout = (|
    paper-width = 254mm;
    paper-height = 142.9mm;
    text-width = 254mm -' 40pt;
    text-height = 142.9mm -' 30pt;
    text-horizontal-margin = 20pt;
    text-vertical-margin = 10pt;
  |)
  let xrel xfloat = layout#paper-width *' xfloat
  let yrel yfloat = layout#paper-height *' yfloat
  let rel xfloat yfloat = (xrel xfloat, yrel yfloat)

% util

  let range n =
    let-rec aux m = if m < 0 then [] else m :: aux (m - 1) in
    aux (n - 1) |> List.reverse


% configuration

  let set-font-metrics fsize ctx =
    ctx |> set-font-size fsize
        |> set-paragraph-margin (fsize *' 0.75) (fsize *' 0.75)
        |> set-min-gap-of-lines 0pt
        |> set-leading (fsize *' 1.4)

  let default-config =
    let default-font ctx =
      ctx |> set-font Latin          (`system:IBMPlexSansJP`, 1.0, 0.0)
          |> set-font Kana           (`system:IBMPlexSansJP`, 1.0, 0.0)
          |> set-font HanIdeographic (`system:IBMPlexSansJP`, 1.0, 0.0)
    in
    let code-font ctx =
      ctx |> set-font Latin          (`system:mplus-1m-regular`, 1.0, 0.0)
          |> set-font Kana           (`system:mplus-1m-regular`, 1.0, 0.0)
          |> set-font HanIdeographic (`system:mplus-1m-regular`, 1.0, 0.0)
          |> set-space-ratio 0.5 0.5 0.5  % mplus の space ratio に合わせる
          |> set-hyphen-min 1000 1000  % ハイフンを無効化
          |> set-space-ratio-between-scripts 0. 0. 0. Latin Kana
          |> set-space-ratio-between-scripts 0. 0. 0. Kana Latin
          |> set-space-ratio-between-scripts 0. 0. 0. Latin HanIdeographic
          |> set-space-ratio-between-scripts 0. 0. 0. HanIdeographic Latin
    in
    let bold-font ctx =
      ctx |> set-font Latin          (`system:IBMPlexSansJP-Bold`, 1.0, 0.0)
          |> set-font Kana           (`system:IBMPlexSansJP-Bold`, 1.0, 0.0)
          |> set-font HanIdeographic (`system:IBMPlexSansJP-Bold`, 1.0, 0.0)
    in
    let light-font ctx =
      ctx |> set-font Latin          (`system:IBMPlexSansJP-Light`, 1.0, 0.0)
          |> set-font Kana           (`system:IBMPlexSansJP-Light`, 1.0, 0.0)
          |> set-font HanIdeographic (`system:IBMPlexSansJP-Light`, 1.0, 0.0)
    in

    (|
      %% font
      font-normal = SlydifiScheme.apply-font-cfg [default-font; set-font-metrics 20pt];
      font-bold = SlydifiScheme.apply-font-cfg [bold-font];
      font-code = SlydifiScheme.apply-font-cfg [code-font];
      font-slide-title = SlydifiScheme.apply-font-cfg [bold-font; set-font-metrics 32pt];
      font-slide-author = SlydifiScheme.apply-font-cfg [default-font; set-font-metrics 24pt;];
      font-slide-date = SlydifiScheme.apply-font-cfg [default-font; set-font-metrics 20pt;];
      font-section-title = SlydifiScheme.apply-font-cfg [bold-font; set-font-metrics 32pt];
      font-frame-title = SlydifiScheme.apply-font-cfg [light-font; set-font-metrics 28pt];
      font-pagenum = SlydifiScheme.apply-font-cfg [default-font; set-font-metrics 12pt;];
      font-footnote = SlydifiScheme.apply-font-cfg [default-font; set-font-metrics 12pt;];
      font-quote = SlydifiScheme.apply-font-cfg [default-font; set-font-metrics 18pt;];

      %% color
      % basic
      color-bg = Color.of-css `#e8e9ec`;
      color-fg = Color.of-css `#33374c`;
      color-emph = Color.of-css `#7759b4`;
      color-weak = Color.of-css `#8389a3`;
      color-red = Color.of-css `#cc517a`;
      color-green = Color.of-css `#668e3d`;
      color-link = Color.of-css `#2d539e`;
      color-bg-code = Color.of-css `#dcdfe7`;
      % frame template
      color-bg-slide-author = Color.of-css `#1e2132`;
      color-fg-section-title = Color.of-css `#33374c`;
      color-fg-section-mirror = Color.of-css `#636983`;
      color-bg-section-mirror = Color.of-css `#6b7089`;
      color-separator = Color.of-css `#6b7089`;
      color-pagenum = Color.of-css `#6b7089`;
      color-indicator-total = Color.of-css `#cad0de`;
      color-indicator-section = Color.of-css `#a2a8b6`;
      color-indicator-done = Color.of-css `#3f83a6`;
      % listing
      color-bullet-dia = Color.of-css `#3f83a6`;
      color-bullet-tria = Color.of-css `#3f83a6`;
      color-bullet-circ = Color.of-css `#3f83a6`;
      % quotation
      color-quote = (Color.of-css `#33374c`) |> color-inner ?:0.15 (Color.of-css `#e8e9ec`);
      color-quote-line = (Color.of-css `#33374c`) |> color-inner ?:0.7 (Color.of-css `#e8e9ec`);

      %% length
      length-frame-title-height = 36pt;
      length-frame-title-left-margin = 10pt;
      length-frame-title-bot-margin = 10pt;
      length-frame-body-top-margin = 14pt;
      length-indicator-line-thickness = 5pt;
      length-indicator-bar-height = 30pt;
      length-frame-footer-xmargin = 10pt;
      length-frame-footer-ymargin = 8pt;
    |)

  let config = SlydifiParam.make default-config

  let-block +set-config cfg = '< +SlydifiParam.set-param(config)(cfg); >
  let-inline \set-config cfg = { \SlydifiParam.set-param(config)(cfg); }
  let-block +with-config cfg bt = '< +SlydifiParam.with-param(config)(cfg)(bt); >
  let-inline \with-config cfg it = { \SlydifiParam.with-param(config)(cfg)(it); }

% document

  let-inline ctx \code code =
    let config = SlydifiParam.get config in
    let ctx =
      ctx |> config#font-code
          |> set-text-color config#color-fg
    in
    let fsize = get-font-size ctx in
    let dpt = fsize *' 0.3 in
    let hgt = fsize *' 1.0 in
    let pads = (fsize *' 0.15, fsize *' 0.15, fsize *' 0.0, fsize *' 0.0) in

    let rectangle-round-fill r extra color =
      let decoS (x, y) wid _ _ =
        [ fill color (Gr.rectangle-round r (x, y -' dpt) (x +' wid, y +' hgt)) ]
      in
      let decoH (x, y) wid _ _ =
        [ fill color (Gr.rectangle-round-left r (x, y -' dpt) (x +' wid +' extra, y +' hgt)) ]
      in
      let decoM (x, y) wid _ _ =
        [ fill color (Gr.rectangle (x, y -' dpt) (x +' wid +' extra, y +' hgt)) ]
      in
      let decoT (x, y) wid _ _ =
        [ fill color (Gr.rectangle-round-right r (x -' extra, y -' dpt) (x +' wid, y +' hgt)) ]
      in
      (decoS, decoH, decoM, decoT)
    in

    let ib = read-inline ctx (embed-string code) in
    inline-frame-breakable pads (rectangle-round-fill 2pt 1pt config#color-bg-code) ib
      |> script-guard Latin

  let document bt =
    let config = SlydifiParam.get config in
    let hookf _ _ =
      let numpages = SlydifiParam.get page-num in
      register-cross-reference `pagecount` (arabic numpages)
    in
    let init-ctx ctx =
      ctx |> config#font-normal
          |> set-text-color config#color-fg
          |> set-code-text-command (command \code)
    in
    SlydifiScheme.document-scheme layout init-ctx hookf bt

% inline commands

  let-inline ctx \emph ?:dcf it =
    let config = SlydifiParam.get config in
    let dcf = Option.from (fun _ -> true) dcf in
    let ctx2 =
      SlydifiOverlay.select-from-two dcf (
        ctx |> config#font-bold
            |> set-text-color config#color-emph
      ) ctx
    in
    read-inline ctx2 it

  let-inline ctx \weak ?:dcf it =
    let config = SlydifiParam.get config in
    let dcf = Option.from (fun _ -> true) dcf in
    let ctx2 =
      SlydifiOverlay.select-from-two dcf (
        ctx |> set-text-color config#color-weak
      ) ctx
    in
    read-inline ctx2 it

  let-inline ctx \textbf ?:dcf it =
    let config = SlydifiParam.get config in
    let dcf = Option.from (fun _ -> true) dcf in
    let ctx2 =
      SlydifiOverlay.select-from-two dcf (config#font-bold ctx) ctx
    in
    read-inline ctx2 it

  let-inline ctx \link ?:text url =
    let config = SlydifiParam.get config in
    match text with
    | Some(text) ->
        let ctx =
          ctx |> set-text-color config#color-link
        in
        read-inline ctx {\href(url)(text);}
    | None ->
        let text = embed-string url in
        let ctx =
          ctx
            |> config#font-code
            |> set-text-color config#color-link
        in
        read-inline ctx {\href(url)(text);}

  let-block ctx +quote bt =
    let config = SlydifiParam.get config in
    let deco (x, y) w h d =
      [
        fill config#color-quote-line (Gr.rectangle (x, y) (x +' 4pt, y +' h))
      ]
    in
    block-frame-breakable ctx (15pt, 0pt, 10pt, 10pt)
      (deco, deco, deco, deco)
        (fun ctx -> (
          let ctx2 = ctx
            |> set-text-color config#color-quote
            |> config#font-quote
          in
          (read-block ctx2 bt)
        ))


% listing

  let-inline ctx \label-dia =
    let config = SlydifiParam.get config in
    let fsize = get-font-size ctx in
    let grf (x, y) =
      let edge = Rail.( init |> push-line (fsize *' 0.25, fsize *' 0.25) ) in
      let gr =
        Rail.(map-repeat (fun i -> edge ^ (90. *. (float i))) 4)
          |> Rail.to-loop (x +' fsize *' 0.25, y +' fsize *' 0.1)
          |> fill config#color-bullet-dia
      in
      [gr]
    in
    inline-graphics 16pt 8pt 0pt grf

  let-inline ctx \label-tria =
    let config = SlydifiParam.get config in
    let fsize = get-font-size ctx in
    let grf (x, y) =
      let gr =
        Rail.(
          init |> push-line (fsize *' 0.4, fsize *' 0.2)
               |> push-line (0pt -' fsize *' 0.4, fsize *' 0.2)
               |> push-line (0pt, 0pt -' fsize *' 0.4)
               |> to-loop (x, y +' fsize *' 0.1)
        ) |> fill config#color-bullet-tria
      in
      [gr]
    in
    let path (x, y) =
      let yc = y +' fsize *' 0.3 in
      let xl = x in
      let xr = x +' fsize *' 0.4 in
      let yu = yc +' fsize *' 0.2 in
      let yd = yc -' fsize *' 0.2 in
      start-path (xl, yu)
        |> line-to (xr, yc)
        |> line-to (xl, yd)
        |> close-with-line
    in
    let gr (x, y) = [fill config#color-bullet-tria (path (x, y))] in
    inline-graphics 16pt 8pt 0pt grf

  let-inline ctx \label-circ =
    let config = SlydifiParam.get config in
    let fsize = get-font-size ctx in
    let path (x, y) =
      let cx = x +' fsize *' 0.3 in
      let cy = y +' fsize *' 0.3 in
      let r = fsize *' 0.15 in
      Gr.circle (cx, cy) r
    in
    let gr (x, y) = [fill config#color-bullet-circ (path (x, y))] in
    inline-graphics 16pt 8pt 0pt (gr)

  let-rec power-float-int r m =
    match m with
    | 0 -> 1.
    | _ -> (power-float-int r (m - 1)) *. r

  let listing-itemfmt ctx idxlst =
    let fsize =
      let config = SlydifiParam.get config in
      get-font-size (config#font-normal ctx)
    in
    let context-body ctxorig _ =
      let shrink-ratio =
        let depth = List.length idxlst in
        0.95 |> Float.pow (float (depth - 1))
          |> Float.max 0.85
          |> Float.min 1.0
      in
      ctxorig |> set-font-metrics (fsize *' shrink-ratio)
    in
    let fmt =
      {|\label-dia;|\label-tria;|\label-circ;|\label-circ;|\label-circ;|}
        |> List.map EnumitemAlias.text-label |> EnumitemAlias.with-depth
        |> EnumitemFormat.set-context-body context-body
    in
    fmt ctx idxlst

  let-block ctx +listing ?:itemfmt item =
    let itemfmt = itemfmt |> Option.from listing-itemfmt in
    read-block ctx '< +listing?:(itemfmt)(item); >

  let-inline ctx \listing ?:itemfmt item =
    let itemfmt = itemfmt |> Option.from listing-itemfmt in
    read-inline ctx {\EnumitemAlias.listing?:(itemfmt)(item);}

  let-block ctx +itemize ?:itemfmt bt =
    let itemfmt = itemfmt |> Option.from listing-itemfmt in
    read-block ctx '< +itemize(itemfmt)(bt); >

  let-block +ditem dt it-dd bt-dd =
    '<
      +EnumitemAlias.ditem?:(fun it -> {\emph{#it;}})(dt)(it-dd)(bt-dd);
    >

  let-block +oitem dcf it bt =
    '< +ghost(dcf)< +item(it)(bt); > >
% frames

  let frame-master config =
    let f ctx () =
      (block-nil, [
        Gr.rectangle (0pt, 0pt) (layout#paper-width, layout#paper-height)
          |> fill config#color-bg
      ])
    in
    Frame.make layout f

  let frame-pagenum config =
    let f ctx () =
      let gr-page-number =
        let pagenum = SlydifiParam.get page-num in
        let total = get-cross-reference `pagecount` |> Option.from `??` in

        let it-pagenum = pagenum |> arabic |> embed-string in
        let it-total = embed-string total in
        let ctx-pagenum =
          ctx |> config#font-pagenum
              |> set-text-color config#color-pagenum
        in
        let ib = read-inline ctx-pagenum {#it-pagenum;/#it-total;} in
        let pos = (xrel 1.0 -' config#length-frame-footer-xmargin, config#length-frame-footer-ymargin) in
        SlydifiGraphics.put-text (1., 0.) pos ib
      in
      (block-nil, [gr-page-number; ] |> List.concat)
    in
    Frame.make layout f

  let frame-sectitle config =
    let f ctx () =
      let gr-section-title =
        if (section-name |> SlydifiParam.has-changed) then
          let it = section-name |> SlydifiParam.get in
          let ctx-pagenum =
            ctx |> config#font-pagenum
                |> set-text-color config#color-pagenum
          in
          let ib = read-inline ctx-pagenum it in
          let pos = (xrel 0.5, config#length-frame-footer-ymargin) in
          SlydifiGraphics.put-text (0.5, 0.) pos ib
        else
          []
      in
      (block-nil, [gr-section-title; ] |> List.concat)
    in
    Frame.make layout f

  let frame-progressbar config =
    let f ctx () =

      let current-pagenum = SlydifiParam.get page-num in

      let total = get-cross-reference `pagecount` |> Option.from `1` |> Int.of-string ?* in
      let float-total = float (if total <= 0 then 1 else total) in  % ゼロ割などの回避

      let gr-lazy = SlydifiScheme.eval-after-page-break (fun _ -> (
        let page-to-progress pg = (float pg -. 0.5) /. float-total in
        let page-to-height pg = layout#paper-height *' (1.0 -. page-to-progress pg) in

        let gr-bar-total =
          Gr.rectangle (layout#paper-width -' config#length-indicator-line-thickness, 0pt) (layout#paper-width, layout#paper-height)
            |> fill config#color-indicator-total
        in

        let gr-section-range (pg-start, pg-end) =
          let track-height = page-to-height pg-start -' page-to-height pg-end in

          let x = layout#paper-width -' config#length-indicator-line-thickness *' 0.5 in
          Gr.line (x, page-to-height pg-start) (x, page-to-height pg-end)
            |> stroke (config#length-indicator-line-thickness *' 0.3) config#color-indicator-section
        in

        let grlst-section-range =
          SlydifiScheme.get-sections ()
            |> List.map (fun sect -> sect#range |> Option.to-list)
            |> List.concat
            |> List.map gr-section-range
        in

        let grlst-pages =
          let grf idx =
            let pagenum = idx + 1 in
            if pagenum == current-pagenum then
              Rail.(
                let l ratio = config#length-indicator-line-thickness *' ratio in
                let ml ratio = 0pt -' l ratio in
                let right-arrow = 
                  init
                    |> push-line (l 0.5, l 0.5)
                    |> push-line (0pt, l 1.5)
                    |> push-line (ml 0.5, ml 0.5)
                in
                concat [
                  right-arrow;
                  right-arrow |> reflect-x |> reverse;
                ] |> to-loop (layout#paper-width -' l 0.5,
                  page-to-height current-pagenum -' l 1.0)
              ) |> fill config#color-indicator-done
            else
              Gr.circle (
                layout#paper-width -' config#length-indicator-line-thickness *' 0.5,
                page-to-height pagenum
              ) (config#length-indicator-line-thickness *' 0.4) |> fill config#color-indicator-section
          in
          range total |> List.map grf
        in

        [[gr-bar-total]; grlst-section-range; grlst-pages; ] |> List.concat
      ))
      in

      (block-nil, [gr-lazy] )
    in
    Frame.make layout f

  let frame-slide-title config =
    let f ctx content =
      % frame-master の graphics list を踏襲する
      let (_, gr-frame-master) = frame-master config |> Frame.embed ctx () in

      let title-mgn = 24pt in

      let gr-background =
        [
          Gr.rectangle (0pt, 0pt) (xrel 1.0, yrel 0.6) |> fill config#color-bg-slide-author;
          Gr.rectangle (0pt, yrel 0.5) (xrel 1.0, yrel 1.0) |> fill config#color-fg;
        ]
      in

      let gr-title =
        let ctx = ctx |> config#font-slide-title |> set-text-color config#color-bg in
        let iblst = content#title |> List.map (read-inline ctx) in
        let pos = (xrel 0.5, yrel 0.5 +' title-mgn) in
        SlydifiGraphics.put-texts
          (| align = (0.5, 0.0); text-align = 0.5; leading = (get-font-size ctx *' 1.6) |)
            pos iblst
      in

      let gr-author =
        let ctx = ctx |> config#font-slide-author |> set-text-color config#color-bg in
        let iblst = content#author |> List.map (read-inline ctx) in
        let pos = (xrel 0.5, yrel 0.5 -' title-mgn) in
        SlydifiGraphics.put-texts
          (| align = (0.5, 1.0); text-align = 0.5; leading = (get-font-size ctx *' 1.6) |)
            pos iblst
      in

      let gr-date =
        let ctx = ctx |> config#font-slide-date |> set-text-color config#color-bg in
        let iblst = content#date |> List.map (read-inline ctx) in
        let pos = (xrel 0.5, yrel 0.15) in
        SlydifiGraphics.put-texts
          (| align = (0.5, 1.0); text-align = 0.5; leading = (get-font-size ctx *' 1.6) |)
            pos iblst
      in

      (block-nil, [gr-frame-master; gr-background; gr-title; gr-author; gr-date] |> List.concat)

    in
    Frame.make layout f

  let frame-section-title config =
    let f ctx content =
      % frame-master の graphics list を踏襲する
      let (_, gr-frame-master) = frame-master config |> Frame.embed ctx () in

      % 設定
      let title-mgn = 24pt in

      let mirror-transform = linear-transform-graphics 1. 0.0 0. (0. -. 0.8) in

      % タイトルのグラフィックス
      let gr-background = [
        Gr.rectangle (0pt, 0pt) (xrel 1.0, yrel 0.45) |> fill config#color-bg-section-mirror;
      ]
      in

      let gr-title =
        let grf clr =
          let ctx = ctx |> config#font-section-title |> set-text-color clr in
          let iblst = content#title |> List.map (read-inline ctx) in
          SlydifiGraphics.put-texts
            (| align = (0.5, 0.0); text-align = 0.5; leading = (get-font-size ctx *' 1.6) |)
              (0pt, title-mgn) iblst
        in
        let gr-title = grf config#color-fg-section-title
          |> List.map (shift-graphics (xrel 0.5, yrel 0.45))
        in
        let gr-title-inv = grf config#color-fg-section-mirror
            |> List.map mirror-transform
            |> List.map (shift-graphics (xrel 0.5, yrel 0.45))
        in
        [gr-title; gr-title-inv] |> List.concat
      in

      (block-nil, [gr-frame-master; gr-background; gr-title] |> List.concat)

    in
    Frame.make layout f

  let frame-toc-content config =
    let f ctx content =
      % content#footer の値に応じてフッターをつけるかどうか変える

      let gr-lazy = SlydifiScheme.eval-after-page-break (fun _ -> (
        let sects =
          let to-item i x =
            let title = x#title in
            match content#index with
            | Some(p) when p == i + 1 ->
                '< +item{\emph{#title;}}<> >
            | Some(_) ->
                '< +item{\weak{#title;}}<> >
            | None ->
                '< +item{#title;}<> >
          in
          SlydifiScheme.get-sections ()
            |> List.mapi to-item
            |> List.fold-left (fun acc x -> '<#acc;#x;>) '<>
        in
        let ib =
          embed-block-bottom ctx layout#text-width (fun ctx -> read-block ctx '<
            +itemize?:(EnumitemAlias.dot-arabic)(sects);
          >)
        in
        let (_, h, _) = get-natural-metrics ib in
        let pos-start-block =
          layout#paper-height
            -' layout#text-vertical-margin
              -' config#length-frame-title-height
                -' config#length-frame-body-top-margin
        in
        [draw-text (layout#text-horizontal-margin, pos-start-block -' h) ib]
      ))
      in

      (block-nil, [gr-lazy] )
    in
    Frame.make layout f

  let frame-normal config =
    let f ctx content =
      % content#footer の値に応じてフッターをつけるかどうか変える
      let (_, gr-master) = frame-master config |> Frame.embed ctx () in
      let gr-footer =
        if content#footer then
          [
            frame-pagenum config |> Frame.embed ctx ();
            frame-sectitle config |> Frame.embed ctx ();
            frame-progressbar config |> Frame.embed ctx ();
          ]
            |> List.map Pair.snd
            |> List.concat
        else
          []
      in

      let title-ymin = layout#paper-height -' config#length-frame-title-height in

      let gr-separator =
        let xleft = config#length-frame-title-left-margin in
        let xright = layout#paper-width -' config#length-frame-title-left-margin in
        let y = title-ymin -' config#length-frame-title-bot-margin in
        [Gr.line (xleft, y) (xright, y) |> stroke 1pt config#color-separator]
      in

      % タイトルのブロックボックス列
      let gr-title =
        let ctx-title = ctx
          |> config#font-frame-title
        in
        let ib-title = read-inline ctx-title content#title in
        [draw-text (config#length-frame-title-left-margin, title-ymin) ib-title]
      in

      % 中身のブロックボックス列
      let bb-inner =
        let ctx = ctx |> config#font-normal |> set-text-color config#color-fg in
        let bb-blank skip =
          line-break false false (ctx |> set-paragraph-margin 0pt skip) inline-fil
        in
        bb-blank (config#length-frame-title-height +' config#length-frame-body-top-margin)
          +++ (read-block ctx content#inner)
      in

      (bb-inner, [gr-master; gr-footer; gr-separator; gr-title] |> List.concat)

    in
    Frame.make layout f

  let frame-toc config =
    let f ctx content =
      let (_, gr-normal) =
        frame-normal config |> Frame.embed ctx (| title = content#title; inner = '<>; footer = false; |)
      in
      let (_, gr-toc-content) = frame-toc-content config |> Frame.embed ctx (| index = content#index |) in
      (block-nil, [gr-normal; gr-toc-content] |> List.concat)
    in
    Frame.make layout f

% frame commands
  let-block ctx +make-title content =
    read-block ctx '<
      +SlydifiScheme.genframe(frame-slide-title (SlydifiParam.get config))(1)(content);
    >

  let-block ctx +section ?:short-name title inner =
    let bb-section = read-block ctx '<
      +SlydifiScheme.genframe(frame-section-title (SlydifiParam.get config))(1)(|title = title;|);
    >
    in
    let it-title =
      let default = title |> List.fold-left (fun it1 it2 -> {#it1;#it2;}) {} in
      short-name |> Option.from default
    in
    let () = section-name |> SlydifiParam.set it-title in
    let page-start = SlydifiParam.get page-num in
    let bb-inner = read-block ctx inner in
    let page-end = SlydifiParam.get page-num in
    let () = section-name |> SlydifiParam.discard in
    let () = SlydifiScheme.add-section ?:(page-start + 1, page-end) it-title in

    bb-section +++ bb-inner

  let-block ctx +section-noframe ?:short-name inner =
    let it-title =
      short-name |> Option.from {}
    in
    let () = section-name |> SlydifiParam.set it-title in
    let bb-inner = read-block ctx inner in
    let () = section-name |> SlydifiParam.discard in
    bb-inner

  let-block ctx +frame ?:n-frame title inner =
    let () = page-num |> SlydifiParam.set (SlydifiParam.get page-num + 1) in
    let n-frame = n-frame |> Option.from 1 in
    read-block ctx '<
      +SlydifiScheme.genframe(frame-normal (SlydifiParam.get config))(n-frame)(|title = title; inner = inner; footer = true|);
    >

  let-block ctx +table-of-contents ?:index title =
    read-block ctx '<
      +SlydifiScheme.genframe(frame-toc (SlydifiParam.get config))(1)(|title = title; index = index|);
    >

  let-block ctx +frame-nofooter ?:n-frame title inner =
    let () = page-num |> SlydifiParam.set (SlydifiParam.get page-num + 1) in
    let n-frame = n-frame |> Option.from 1 in
    read-block ctx '<
      +SlydifiScheme.genframe(frame-normal (SlydifiParam.get config))(n-frame)(|title = title; inner = inner; footer = false|);
    >

  let-block ctx +namedframe name title inner =
    let () = page-num |> SlydifiParam.set (SlydifiParam.get page-num + 1) in
    read-block ctx '<
      +SlydifiScheme.namedframe(frame-normal (SlydifiParam.get config))(name)(|title = title; inner = inner; footer = true|);
    >

  let-block ctx +againframe ?:lyr name =
    let () = page-num |> SlydifiParam.set (SlydifiParam.get page-num + 1) in
    match lyr with
    | Some(lyr) -> read-block ctx '<
      +SlydifiScheme.againframe?:(lyr)(name);
    >
    | None -> read-block ctx '<
      +SlydifiScheme.againframe(name);
    >

% \footnote{} command

  let-inline ctx \footnotetext ref-label it =
    let config = SlydifiParam.get config in
    let bbf num =
      let it-num = embed-string (arabic num) in
      let ctx = config#font-footnote ctx in
        line-break false false ctx (read-inline ctx {#it-num; #it;} ++ inline-fil)
    in
      FootnoteScheme.main ctx (Some(ref-label)) (fun _ -> inline-nil) bbf

  let-inline ctx \footnotemark ref-label =
    let size = get-font-size ctx in
    let ctx =
      ctx |> set-font-size (size *' 0.75)
          |> set-manual-rising (size *' 0.25)
    in
    let ctx =
      ctx |> set-font-size (size *' 0.75)
          |> set-manual-rising (size *' 0.25)
    in
    match FootnoteScheme.get-footnote-num ref-label with
    | Some(n) ->
      let it-num = embed-string n in
      read-inline ctx {\*#it-num;}
    | _ ->
      read-inline ctx {\*?}

  let-inline ctx \footnote it =
    let config = SlydifiParam.get config in
    let size = get-font-size ctx in
    let ibf num =
      let it-num = embed-string (arabic num) in
      let ctx =
        ctx |> set-font-size (size *' 0.75)
            |> set-manual-rising (size *' 0.25)
      in
        read-inline ctx {\*#it-num;}
    in
    let bbf num =
      let it-num = embed-string (arabic num) in
      let ctx = config#font-footnote ctx in
        line-break false false ctx (read-inline ctx {#it-num; #it;} ++ inline-fil)
    in
      FootnoteScheme.main ctx None ibf bbf

end

let document = SlydifiThemeArctic.document
