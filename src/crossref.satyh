@require: base/int
@require: base/string

% section の情報を出し入れする。
% cross-reference の情報に string の情報しか使えないので、以下のようにする。
% 
% "sections": ""

module SlydifiCrossrefManager : sig

  val register-section: (|
    key: string;
    title: string;
    page-start: int;
    page-end: int;
  |) -> unit
  val register-totalpage: int -> unit

  val get-sections: unit -> ((|
    key: string;
    title: string;
    page-start: int;
    page-end: int;
  |)) list
  val find-section: string -> ((|
    key: string;
    title: string;
    page-start: int;
    page-end: int;
  |)) option

  val get-totalpage: unit -> int option

  % val get: string -> (string * int) option
  % 
  % val get-all: unit -> (string * int) list
  % 
  % val set: string -> string * int -> unit
  % 
  % val set-autokey: string * int -> unit

end = struct

  % 以下の3種類のキーに分けて保存。
  % - `content:section:title:{key}`: title を格納
  % - `content:section:page-start:{key}`: page-start を格納
  % - `content:section:page-end:{key}`: page-end を格納
  % さらに、section 一覧を取得するために key を羅列する
  % - `keys:section`: key の列を comma-separated-list で格納
  type section = (|
    key: string;
    title: string;
    page-start: int;
    page-end: int;
  |)

  % `content:totalpage` キーに保存。
  type totalpage = int

  let char-delimiter = Char.make `:`

  let join-str sep strlst =
    let-rec aux result rest =
      match rest with
      | [] -> result
      | x :: xs -> aux (result ^ sep ^ x) xs
    in
    aux ` ` strlst

  let get-section-keys () =
    match (get-cross-reference `keys:section`) with
    | None -> []
    | Some(keys-section) ->
        keys-section |> String.split-by char-delimiter

  let append-section-keys key =
    let keys = get-section-keys () in
    let new-keys = List.append keys [key] in
    let new-keys-str = new-keys |> join-str (Char.to-string char-delimiter) in
    register-cross-reference `keys:section` new-keys-str

  let register-section sect =
    % 区切り文字 `:` が含まれていないことを保証
    match (sect#key |> String.index char-delimiter) with
    | Some(i) ->
        `Key must not contain delimiter character ":", given "` ^ sect#key ^ `"`
          |> abort-with-message
    | None ->
        let key = sect#key in
        let str-page-start = Int.to-string sect#page-start in
        let str-page-end = Int.to-string sect#page-end in
        let _ = [
          register-cross-reference (`content:section:title:` ^ key) sect#title;
          register-cross-reference (`content:section:page-start:` ^ key) str-page-start;
          register-cross-reference (`content:section:page-end:` ^ key) str-page-end;
        ]
        in
        % let keys = get-keys in
        ()

  let register-totalpage tpg =
    let str-tpg = Int.to-string tpg in
    register-cross-reference `content:totalpage` str-tpg

  let get-sections () = []

  let find-section key = None

  let get-totalpage () = None


  % let get key =
  %   let key-name = `name:` ^ key in
  %   let key-page = `page:` ^ key in
  %   match (get-cross-reference key-name, get-cross-reference key-page) with
  %   | (Some(name), Some(pg)) -> Some(name, Int.of-string pg)
  %   | _ -> None
  % 
  % let set key =
  %   probe-cross-reference



end
